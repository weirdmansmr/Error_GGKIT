import { useState } from "react";
import "./App.css";

function App() {
	const [input, setInput] = useState();
	const [result, setResult] = useState("");
	const [disable, setDisable] = useState(false);

	const answer = new RegExp(/–ö–≤–∞–¥—Ä–∞—Ç/gi);

	function erroring(el) {
		if (el.match(/^\d+$/)) {
			throw new Error(
				"–ù–µ, –≤—Å—ë-—Ç–∞–∫–∏ –Ω–µ —á–∏—Å–ª–æ, –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —á–∏—Å–ª–æ –≤—ã–∑—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É",
			);
		} else if (el.match(/true|false/g)) {
			throw new Error(
				`–ó–∞—á–µ–º —Ç–µ–±–µ –±—É–ª–µ–≤—ã–π —Ç–∏–ø? –ê, –Ω—É –¥–∞, –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è..`,
			);
		} else if (
			el.match(/<|>|let|const|var|function|for|if|switch|{|}|\[|\]/g)
		) {
			setDisable(true);
			throw new Error(
				"–ê –≤–æ—Ç —ç—Ç–æ –∑—Ä—è, –Ω–µ –ª–µ–∑—å —Å–æ —Å–≤–æ–∏–º–∏ –∫–æ–¥–∞–º–∏, –¥–∞–ª—å—à–µ –¥–æ—Å—Ç—É–ø–∞ –Ω–µ—Ç üõë",
			);
		} else if (el.match(/–ö–≤–∞–¥—Ä–∞—Ç/gi)) {
			return '–û–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è, –æ—Ç–≤–µ—Ç–æ–º –±—ã–ª–æ —Å–∞–º–æ —Å–ª–æ–≤–æ "–ö–≤–∞–¥—Ä–∞—Ç"';
		} else if (el.match(/–∫–≤–∞/gi)) {
			throw new Error('–∫–∞–∂–µ—Ç—Å—è "–∫–≤–∞" —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é –æ—Ç–≤–µ—Ç–∞ ü§î');
		} else if (el.match(/[a-z]/gi)) {
			throw new Error("–ö–∞–∂–µ—Ç—Å—è —ç—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ –ª–∞–¥–∏—Ç —Å –∞–Ω–≥–ª–∏–π—Å–∫–∏–º");
		} else if (typeof el == "string") {
			throw new Error("–°—Ç—Ä–æ–∫–∏? –ú–æ–∂–µ—Ç —Ç—ã –∏–¥—ë—à—å –∏ –Ω–µ–º–Ω–æ–∂–∫–æ –≤–µ—Ä–Ω—ã–º –ø—É—Ç—ë–º ü§è");
		}
	}

	const check = () => {
		try {
			setResult(erroring(input));
		} catch (error) {
			setResult(<>{error.message}</>);
		}
	};

	return (
		<main>
			<h1>–ö–≤–∞–¥—Ä–∞—Ç</h1>
			{input == undefined || input == "" ? (
				<p>–ö–∞–∂–µ—Ç—Å—è —ç—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –∫–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞. –í–≤–æ–¥–∏ –≤ –ø–æ–ª–µ —á–∏—Å–ª–æ </p>
			) : answer.test(input) ? (
				<p>–ö–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –ø–æ—Ö–æ–∂–µ –Ω–∞ –æ—Ç–≤–µ—Ç</p>
			) : disable ? (
				<p>–î—É–º–∞—é –ª—É—á—à–µ –∫–æ–¥ —Ç—É–¥–∞ –Ω–µ –ø–∏—Å–∞—Ç—å...</p>
			) : (
				<p>–ò–ª–∏ –Ω–µ —á–∏—Å–ª–æ...</p>
			)}
			<input
				type="text"
				id="text"
				disabled={disable ? "disabled" : ""}
				onChange={(el) => setInput(el.target.value)}
			/>
			<button onClick={() => check()}>–ü—É—Å–∫</button>
			<p>{result}</p>
		</main>
	);
}

export default App;
